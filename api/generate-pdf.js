// Vercel Serverless Function for PDF generation using PDFKit
const PDFDocument = require('pdfkit');
const path = require('path');
const fs = require('fs');

module.exports = async (req, res) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    return res.status(200).end();
  }

  // Only allow POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { content, results, timestamp } = req.body;

    // Validate input
    if (!content || !results) {
      return res.status(400).json({ 
        error: 'Missing required fields: content and results' 
      });
    }

    console.log('[Vercel] Generating PDF report with PDFKit...');

    // Create a document
    const doc = new PDFDocument({
      size: 'A4',
      margins: {
        top: 50,
        bottom: 50,
        left: 50,
        right: 50
      }
    });

    // Register Chinese font
    const fontPath = path.join(__dirname, '../backend/fonts/NotoSansSC.otf');
    if (fs.existsSync(fontPath)) {
      doc.registerFont('NotoSansSC', fontPath);
      doc.font('NotoSansSC');
      console.log('[Vercel] Chinese font registered');
    } else {
      console.warn('[Vercel] Chinese font not found, using default font');
    }

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=privacy-analysis-${Date.now()}.pdf`);
    res.setHeader('Access-Control-Allow-Origin', '*');

    // Pipe PDF to response
    doc.pipe(res);

    // Colors
    const primaryColor = '#667eea';
    const textColor = '#2c3e50';

    // Helper function to add a dimension
    const addDimension = (number, title, content, isFirst = false) => {
      if (!isFirst) {
        doc.addPage();
      }

      // Dimension number and title
      doc.fillColor(primaryColor)
         .fontSize(48)
         .text(number.toString().padStart(2, '0'), 50, 50);

      doc.fillColor(primaryColor)
         .fontSize(24)
         .text(title, 50, 110);

      // Divider line
      doc.moveTo(50, 145)
         .lineTo(545, 145)
         .strokeColor(primaryColor)
         .lineWidth(2)
         .stroke();

      // Content
      doc.fillColor(textColor)
         .fontSize(11)
         .text(content || 'No analysis available', 50, 165, {
           width: 495,
           align: 'left',
           lineGap: 4
         });
    };

    // === PAGE 1: Cover Page ===
    
    doc.fillColor(primaryColor)
       .fontSize(36)
       .text('PRIVACY PRISM', 50, 200, { align: 'center' });

    doc.fillColor(textColor)
       .fontSize(16)
       .text('Privacy Risk Analysis Report', 50, 260, { align: 'center' });

    doc.fontSize(12)
       .fillColor('#7f8c8d')
       .text(`Generated on ${timestamp || new Date().toLocaleString()}`, 50, 300, { align: 'center' });

    doc.moveTo(150, 340)
       .lineTo(445, 340)
       .strokeColor(primaryColor)
       .lineWidth(3)
       .stroke();

    doc.fillColor(textColor)
       .fontSize(14)
       .text('Analyzed Content', 50, 370);

    const contentPreview = content.length > 800 ? content.substring(0, 800) + '...' : content;
    doc.fontSize(10)
       .fillColor('#555')
       .text(contentPreview, 50, 395, {
         width: 495,
         align: 'left',
         lineGap: 3
       });

    // === PAGE 2-7: Analysis Dimensions ===
    
    doc.addPage();
    addDimension(1, 'EXPOSURE', results.exposure || 'No analysis available', true);
    addDimension(2, 'INFERENCE', results.inference || 'No analysis available');
    addDimension(3, 'AUDIENCE & CONSEQUENCES', results.audience || 'No analysis available');
    addDimension(4, 'PLATFORMS & RULES', results.platforms || 'No analysis available');
    addDimension(5, 'AMPLIFICATION', results.amplification || 'No analysis available');
    addDimension(6, 'MANIPULABILITY', results.manipulability || 'No analysis available');

    // === LAST PAGE: Footer ===
    doc.addPage();

    doc.fillColor(primaryColor)
       .fontSize(20)
       .text('About Privacy Prism', 50, 200);

    doc.fillColor(textColor)
       .fontSize(11)
       .text(
         'This report was generated by Privacy Prism, an AI-powered privacy risk analysis tool that evaluates content across six critical privacy dimensions.',
         50, 240, { width: 495, align: 'left', lineGap: 4 }
       );

    doc.fontSize(11)
       .text(
         'The analysis uses advanced AI models to identify potential privacy risks including personal information exposure, inference risks, audience consequences, platform policy violations, amplification potential, and manipulability concerns.',
         50, 290, { width: 495, align: 'left', lineGap: 4 }
       );

    doc.fillColor('#95a5a6')
       .fontSize(9)
       .text(
         'DISCLAIMER: This platform provides AI-powered privacy risk assessments for educational and informational purposes only. All analysis results should be reviewed by qualified privacy professionals before making critical decisions.',
         50, 650, { width: 495, align: 'center', lineGap: 3 }
       );

    doc.fillColor('#bdc3c7')
       .fontSize(8)
       .text(
         `Â© ${new Date().getFullYear()} Privacy Prism. All rights reserved.`,
         50, 750, { width: 495, align: 'center' }
       );

    // Finalize PDF
    doc.end();

    console.log('[Vercel] PDF generated successfully');

  } catch (error) {
    console.error('[Vercel] PDF generation error:', error);
    
    if (!res.headersSent) {
      res.status(500).json({ 
        error: error.message || 'Failed to generate PDF' 
      });
    }
  }
};
